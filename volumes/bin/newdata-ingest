#!/usr/bin/env python3
"""
Scan /data/newdata for inputs and dispatch to OCR or text conversion workers.

This is a scaffold: it prints what it would do, honoring --dry-run.
Intended to run inside the container with /data/bin in PATH.
"""
from __future__ import annotations

import argparse
import os
import sys
from pathlib import Path


IMAGE_EXTS = {".png", ".jpg", ".jpeg", ".tif", ".tiff", ".bmp", ".webp"}
PDF_EXTS = {".pdf"}
TEXT_EXTS = {".txt", ".md", ".rtf", ".docx", ".doc", ".odt", ".html", ".htm", ".tex", ".epub"}


def parse_args() -> argparse.Namespace:
    p = argparse.ArgumentParser(description="Ingest new data and route to OCR or text conversion")
    p.add_argument("--root", default=os.environ.get("NEWDATA_DIR", "/data/newdata"), help="Input root directory")
    p.add_argument("--images-dir", default=os.environ.get("IMAGES_DIR", "/data/images"))
    p.add_argument("--ocr-dir", default=os.environ.get("OCR_DIR", "/data/ocr"))
    p.add_argument("--notes-db", default=os.environ.get("NOTES_DB", "/data/notesdb/notes.db"))
    p.add_argument("--engine", default=os.environ.get("OCR_ENGINE", "tesseract"), help="OCR engine: tesseract|paddle")
    p.add_argument("--langs", default=os.environ.get("OCR_LANGS", "eng"), help="OCR language codes")
    p.add_argument("--move-processed", action="store_true", help="Move processed files to _processed")
    p.add_argument("--since", help="Only process files modified since this ISO timestamp or epoch seconds")
    p.add_argument("--max-workers", type=int, default=1)
    p.add_argument("--watch", action="store_true", help="Watch for new files (not implemented in scaffold)")
    p.add_argument("--dry-run", action="store_true")
    return p.parse_args()


def classify(path: Path) -> str:
    ext = path.suffix.lower()
    if ext in IMAGE_EXTS:
        return "image"
    if ext in PDF_EXTS:
        return "pdf"
    if ext in TEXT_EXTS:
        return "text"
    return "unknown"


def main() -> int:
    args = parse_args()
    root = Path(args.root)
    if not root.exists():
        print(f"[ingest] root not found: {root}", file=sys.stderr)
        return 1
    files = [p for p in root.rglob("*") if p.is_file()]
    if not files:
        print("[ingest] No files to process.")
        return 0
    counts = {"image": 0, "pdf": 0, "text": 0, "unknown": 0}
    for f in files:
        kind = classify(f)
        counts[kind] = counts.get(kind, 0) + 1
        print(f"[ingest] {kind:7s} :: {f}")
    print("[ingest] Summary:")
    for k, v in counts.items():
        print(f"  {k:7s}: {v}")
    if args.dry_run:
        print("[ingest] Dry run complete.")
        return 0
    print("[ingest] This is a scaffold. Worker dispatch not implemented yet.")
    return 0


if __name__ == "__main__":
    raise SystemExit(main())

