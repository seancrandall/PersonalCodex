#!/usr/bin/env python3
"""
Scan /data/newdata for inputs and run the PDF → pages → blocks → images → markdown pipeline.

Modular steps (PDFs first):
- pdf-to-pages: per-page PNG + blocks metadata under /data/ocr/<sha>/
- move-images: move PNGs to /data/images with canonical names
- assemble-md: build a single Markdown file from blocks JSON
- move source PDF to /data/newdata/processed
"""
from __future__ import annotations

import argparse
import os
import sys
from pathlib import Path
import hashlib
import shutil
import subprocess


IMAGE_EXTS = {".png", ".jpg", ".jpeg", ".tif", ".tiff", ".bmp", ".webp"}
PDF_EXTS = {".pdf"}
TEXT_EXTS = {".txt", ".md", ".rtf", ".docx", ".doc", ".odt", ".html", ".htm", ".tex", ".epub"}


def parse_args() -> argparse.Namespace:
    p = argparse.ArgumentParser(description="Ingest new data and route to OCR or text conversion")
    p.add_argument("--root", default=os.environ.get("NEWDATA_DIR", "/data/newdata"), help="Input root directory")
    p.add_argument("--images-dir", default=os.environ.get("IMAGES_DIR", "/data/images"))
    p.add_argument("--ocr-dir", default=os.environ.get("OCR_DIR", "/data/ocr"))
    p.add_argument("--notes-db", default=os.environ.get("NOTES_DB", "/data/notesdb/notes.db"))
    p.add_argument("--engine", default=os.environ.get("OCR_ENGINE", "tesseract"), help="OCR engine: tesseract|paddle")
    p.add_argument("--langs", default=os.environ.get("OCR_LANGS", "eng"), help="OCR language codes")
    p.add_argument("--move-processed", action="store_true", help="Move processed files to _processed")
    p.add_argument("--since", help="Only process files modified since this ISO timestamp or epoch seconds")
    p.add_argument("--max-workers", type=int, default=1)
    p.add_argument("--watch", action="store_true", help="Watch for new files (not implemented in scaffold)")
    p.add_argument("--dry-run", action="store_true")
    return p.parse_args()


def classify(path: Path) -> str:
    ext = path.suffix.lower()
    if ext in IMAGE_EXTS:
        return "image"
    if ext in PDF_EXTS:
        return "pdf"
    if ext in TEXT_EXTS:
        return "text"
    return "unknown"


def main() -> int:
    args = parse_args()
    root = Path(args.root)
    if not root.exists():
        print(f"[ingest] root not found: {root}", file=sys.stderr)
        return 1
    files = [p for p in root.rglob("*.pdf") if p.is_file()]
    if not files:
        print("[ingest] No PDF files to process.")
        return 0
    processed_dir = root / "processed"
    processed_dir.mkdir(parents=True, exist_ok=True)

    for pdf in sorted(files):
        # Compute sha for stable ocr dir and naming
        h = hashlib.sha256()
        with open(pdf, "rb") as f:
            for chunk in iter(lambda: f.read(1024 * 1024), b""):
                h.update(chunk)
        sha = h.hexdigest()
        ocr_root = Path(args.ocr_dir) / sha
        pages_dir = ocr_root / "pages"
        done_marker = ocr_root / "done.marker"

        if done_marker.exists():
            print(f"[ingest] Skip already processed {pdf} ({sha})")
            continue

        print(f"[ingest] Processing {pdf} → sha={sha}")
        # 1) pdf-to-pages
        cmd = [
            "pdf-to-pages",
            str(pdf),
            "--outdir",
            args.ocr_dir,
            "--subdir",
            sha,
            "--dpi",
            "300",
        ]
        if args.dry_run:
            cmd.append("--dry-run")
        subprocess.run(cmd, check=True)

        if not args.dry_run:
            # 2) move-images
            subprocess.run([
                "move-images",
                "--pages-dir",
                str(pages_dir),
                "--images-dir",
                args.images_dir,
                "--source",
                str(pdf),
            ], check=True)

            # 3) assemble-md
            subprocess.run([
                "assemble-md",
                "--ocr-root",
                str(ocr_root),
                "--images-dir",
                args.images_dir,
            ], check=True)

            # 4) mark done and move source
            done_marker.write_text("ok", encoding="utf-8")
            if args.move_processed:
                dest = processed_dir / pdf.name
                shutil.move(str(pdf), str(dest))
                print(f"[ingest] moved source -> {dest}")

    print("[ingest] Done.")
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
