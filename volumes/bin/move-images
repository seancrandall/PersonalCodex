#!/usr/bin/env python3
from __future__ import annotations

import argparse
import hashlib
import json
import os
import shutil
from pathlib import Path


def sha256_file(path: Path, chunk_size: int = 1024 * 1024) -> str:
    h = hashlib.sha256()
    with open(path, "rb") as f:
        while True:
            chunk = f.read(chunk_size)
            if not chunk:
                break
            h.update(chunk)
    return h.hexdigest()


def main() -> int:
    ap = argparse.ArgumentParser(description="Move page PNGs to /data/images with canonical names")
    ap.add_argument("--pages-dir", required=True, help="Directory containing page-XXXX.png")
    ap.add_argument("--images-dir", default=os.environ.get("IMAGES_DIR", "/data/images"))
    ap.add_argument("--source", help="Source input file for hashing (improves uniqueness)")
    ap.add_argument("--prefix", help="Override naming prefix (default: page-<sha>")
    ap.add_argument("--dry-run", action="store_true")
    args = ap.parse_args()

    pages_dir = Path(args.pages_dir)
    if not pages_dir.exists():
        print(f"[move-images] pages dir doesn't exist: {pages_dir}")
        return 1
    images_dir = Path(args.images_dir)
    images_dir.mkdir(parents=True, exist_ok=True)

    sha = None
    if args.source:
        sha = sha256_file(Path(args.source))
    else:
        # Hash the content of page images to derive a stable id
        h = hashlib.sha256()
        for p in sorted(pages_dir.glob("page-*.png")):
            h.update(p.read_bytes())
        sha = h.hexdigest()
    prefix = args.prefix or f"page-{sha}"

    moved = []
    for idx, src in enumerate(sorted(pages_dir.glob("page-*.png")), start=1):
        dest = images_dir / f"{prefix}-p{idx:04d}.png"
        if args.dry_run:
            print(f"[move-images] would move {src} -> {dest}")
        else:
            shutil.move(str(src), str(dest))
        moved.append({"src": str(src), "dest": str(dest)})

    # Emit a small manifest next to pages dir
    manifest = {"prefix": prefix, "sha": sha, "images": moved}
    with open(pages_dir.parent / "moved_images.json", "w", encoding="utf-8") as f:
        json.dump(manifest, f, ensure_ascii=False, indent=2)
    print(f"[move-images] moved {len(moved)} images with prefix {prefix}")
    return 0


if __name__ == "__main__":
    raise SystemExit(main())

